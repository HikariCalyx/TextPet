[CommandDatabase]
name = mmsf1
cont = 255
splt = keyWait1 clearMsg



#[Command]
#name = nop
#mask = FF FF
#desc = Does nothing.
#base = E5 00



[Command]
name = end
mask = FF FF
desc = Closes any open message box and ends script execution.
base = E6 00
ends = always



[Command]
name = keyWait0
mask = FF FF
desc = Pauses script execution until a button is pressed.
base = E7 00



[Command]
name = keyWait1
mask = FF FF
desc = Pauses script execution until a button is pressed.
base = E7 01



[Command]
name = keyWait2
mask = FF FF
desc = Pauses script execution until a button is pressed.
base = E7 02



[Command]
name = msgOpen
mask = FF FF
desc = Opens the message box and waits until the animation finishes.
base = E8 00



[Command]
name = msgClose
mask = FF FF
desc = Closes the message box and waits until the animation finishes. The message box remains on-screen until script execution ends.
base = E8 01



[Command]
name = msgOpenQuick
mask = FF FF
desc = Opens the message box without any animation.
base = E8 02



[Command]
name = msgCloseQuick
mask = FF FF
desc = Closes the message box without any animation. The message box remains on-screen until script execution ends.
base = E8 03



#[Command]
#name = newline
#mask = FF FF
#desc = Continues printing text on the next line.
#base = E9 00



[Command]
name = flagSet
mask = FF FF 00 00
desc = Sets the specified flag.
base = EA 00

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to set.
type = hex



[Command]
name = flagClear
mask = FF FF 00 00
desc = Clears the specified flag.
base = EA 01

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to clear.
type = hex



[Command]
name = flag02
mask = FF FF
desc = Does some stuff only if you're at a point in the story where you have to go to sleep. (TODO)
base = EA 02



[Command]
name = flagSetBuffered
mask = FF FF 00
desc = Sets a buffered flag stored in memory. (TODO: Verify)
base = EA 03

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the flag from.



[Command]
name = flagClearBuffered
mask = FF FF 00
desc = Clears a buffered flag stored in memory. (TODO: Verify)
base = EA 04

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the flag from.



[Command]
name = optionButton
mask = FF FF 00 00 00 00
desc = Prepares an option button for later display. The following 8 characters of text will be printed to the button.
base = EB 00

[Parameter]
name = up
offs = 2
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 3
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 4
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 5
bits = 8
desc = Which option to go to when Right is pressed.



[Command]
name = optionButtonLong
mask = FF FF 00 00 00 00
desc = Prepares an option button for later display. The following 16 characters of text will be printed to the button.
base = EB 01

[Parameter]
name = up
offs = 2
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 3
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 4
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 5
bits = 8
desc = Which option to go to when Right is pressed.



[Command]
name = optionText
mask = FF FF 00 00 00 00
desc = Creates a cursor menu option at the current text position.
base = EB 02

[Parameter]
name = up
offs = 2
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 3
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 4
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 5
bits = 8
desc = Which option to go to when Right is pressed.



[Command]
name = optionButton03
mask = FF FF 00 00 00 00 00
desc = Prepares an option button for later display. (TODO)
base = EB 03

[Parameter]
name = length
offs = 2
bits = 8
desc = The amount of characters to print to the button.

[Parameter]
name = up
offs = 3
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 4
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 5
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 6
bits = 8
desc = Which option to go to when Right is pressed.



[Command]
name = optionButton04
mask = FF FF 00 00 00 00 00
desc = Prepares an option button for later display. (TODO)
base = EB 04

[Parameter]
name = length
offs = 2
bits = 8
desc = The amount of characters to print to the button.

[Parameter]
name = up
offs = 3
bits = 8
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 4
bits = 8
desc = Which option to go to when Down is pressed.

[Parameter]
name = left
offs = 5
bits = 8
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 6
bits = 8
desc = Which option to go to when Right is pressed.



[Command]
name = space
mask = FF FF 00
desc = Moves the text position to the right in blocks of space widths.
base = EC 00
prnt = true

[Parameter]
name = count
offs = 2
bits = 8
desc = The amount of spaces to insert.



[Command]
name = spacePx
mask = FF FF 00
desc = Moves the text position to the right a number of pixels.
base = EC 01
prnt = true

[Parameter]
name = count
offs = 2
bits = 8
desc = The amount of pixels to insert.



[Command]
name = selectButtonRow2
mask = FF FF 00 00 00 00
desc = Displays a button layout with 2 buttons in a row. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default. (TODO, esp. check ends)
base = ED 00
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last labeled option.
valn = bool

[Parameter]
name = todo
offs = 2.6
bits = 2
desc = (TODO: Check unused)

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = The script to jump to when option 2 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = The script to jump to when option 3 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = selectButtonColumn2
mask = FF FF 00 00 00 00
desc = Displays a button layout with 2 buttons in a column. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default. (TODO, esp. check ends)
base = ED 01
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last labeled option.
valn = bool

[Parameter]
name = todo
offs = 2.6
bits = 2
desc = (TODO: Check unused)

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = The script to jump to when option 2 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = The script to jump to when option 3 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = selectButtonColumn3
mask = FF FF 00 00 00 00 00
desc = Displays a button layout with 3 buttons in a column. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default. (TODO, esp. check ends)
base = ED 02
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last labeled option.
valn = bool

[Parameter]
name = todo
offs = 2.6
bits = 2
desc = (TODO: Check unused)

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = The script to jump to when option 2 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = The script to jump to when option 3 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump4
offs = 6
bits = 8
desc = The script to jump to when option 4 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = selectButtonSquare4
mask = FF FF 00 00 00 00 00 00
desc = Displays a button layout with 4 buttons in a square. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default. (TODO, esp. check ends)
base = ED 03
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last labeled option.
valn = bool

[Parameter]
name = todo
offs = 2.6
bits = 2
desc = (TODO: Check unused)

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = The script to jump to when option 2 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = The script to jump to when option 3 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump4
offs = 6
bits = 8
desc = The script to jump to when option 4 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump5
offs = 7
bits = 8
desc = The script to jump to when option 5 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = selectText
mask = FF FF 00 00 00 00 00 00 00 00 00
desc = Displays options in the text box. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default. (TODO, esp. check ends)
base = ED 04
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last labeled option.
valn = bool

[Parameter]
name = todo
offs = 2.6
bits = 2
desc = (TODO: Check unused)

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = The script to jump to when option 2 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = The script to jump to when option 3 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump4
offs = 6
bits = 8
desc = The script to jump to when option 4 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump5
offs = 7
bits = 8
desc = The script to jump to when option 5 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump6
offs = 8
bits = 8
desc = The script to jump to when option 6 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump7
offs = 9
bits = 8
desc = The script to jump to when option 7 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jump8
offs = 10
bits = 8
desc = The script to jump to when option 8 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = selectButtonSingle
mask = FF FF 00 00
desc = Displays a button layout with 1 single button. Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default. (TODO, esp. check ends)
base = ED 05
ends = never

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = BContinue
offs = 2.4
bits = 1
desc = If true, pressing the B button is treated as continuing the script; otherwise, the last defined option is assigned.
valn = bool

[Parameter]
name = disableB
offs = 2.5
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last labeled option.
valn = bool

[Parameter]
name = todo
offs = 2.6
bits = 2
desc = (TODO: Check unused)

[Parameter]
name = jump1
offs = 3
bits = 8
desc = The script to jump to when option 1 is chosen, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = wait
mask = FF FF 00 00
desc = Pauses script execution for a specified number of frames.
base = EE 00
prnt = true

[Parameter]
name = frames
offs = 2
bits = 16
desc = The amount of frames to wait.



[Command]
name = waitFlag
mask = FF FF 00 00
desc = Pauses script execution until the specified flag is set.
base = EE 01
prnt = true

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag that must be set before script execution may continue.
type = hex



[Command]
name = waitHold
; NOTE: unlike MMBN, this command is only 2 bytes long
mask = FF FF
desc = Pauses script execution indefinitely.
base = EE 02
ends = always



[Command]
name = waitOWVar
mask = FF FF 00 00
desc = Pauses script execution until the specified overworld variable equals a specific value.
base = EE 03
prnt = true

[Parameter]
name = variable
offs = 2
bits = 8
desc = The index of the variable.

[Parameter]
name = value
offs = 3
bits = 8
desc = The value the variable must be equal to before script execution may continue.



[Command]
name = waitSkip
mask = FF FF 00 00
desc = Pauses script execution for a specified number of frames, unless the A or B button has been pressed.
base = EE 04
prnt = true

[Parameter]
name = frames
offs = 2
bits = 16
desc = The maximum amount of frames to wait.



[Command]
name = checkFlag
mask = FF FF 00 00 00 00
desc = Checks the specified flag, and jumps to a different script depending on if it is true or false.
base = EF 00

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to check.
type = hex

[Parameter]
name = jumpIfTrue
offs = 4
bits = 8
desc = The script to jump to if the flag is set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 5
bits = 8
desc = The script to jump to if the flag is not set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkChapter
mask = FF FF 00 00 00 00
desc = Checks the current story chapter, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EF 01

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the current story chapter falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the current story chapter falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkSubArea
mask = FF FF 00 00 00 00
desc = Checks the current subarea, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EF 02

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the subarea falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the subarea falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkArea
mask = FF FF 00 00 00 00
desc = Checks the current area, and jumps to a different script depending on if it falls inside or outside the specified range.
base = EF 03

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the area falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the area falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkGameVersion
mask = FF FF 00 00 00
desc = Checks the current game version, and jumps to a different script depending on if the current game is Pegasus, Leo or Dragon.
base = EF 04

[Parameter]
name = jumpIfPegasus
offs = 2
bits = 8
desc = The script to jump to if the current game is Pegasus, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfLeo
offs = 3
bits = 8
desc = The script to jump to if the current game is Leo, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfDragon
offs = 4
bits = 8
desc = The script to jump to if the current game is Dragon, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = check05
mask = FF FF 00 00 00 00 00
desc = Clears 0x14 bytes at 0x021D2330? (TODO)
base = EF 05

[Parameter]
name = unused1
offs = 2
bits = 8
desc = TODO

[Parameter]
name = unused2
offs = 3
bits = 8
desc = TODO

[Parameter]
name = unused3
offs = 4
bits = 8
desc = TODO

[Parameter]
name = unused4
offs = 5
bits = 8
desc = TODO

[Parameter]
name = unused5
offs = 6
bits = 8
desc = TODO



[Command]
name = check06
mask = FF FF 00 00 00 00 00
desc = Clears 0x14 bytes at 0x021D2330? (TODO)
base = EF 06

[Parameter]
name = unused1
offs = 2
bits = 8
desc = TODO

[Parameter]
name = unused2
offs = 3
bits = 8
desc = TODO

[Parameter]
name = unused3
offs = 4
bits = 8
desc = TODO

[Parameter]
name = unused4
offs = 5
bits = 8
desc = TODO

[Parameter]
name = unused5
offs = 6
bits = 8
desc = TODO



[Command]
name = check07
mask = FF FF 00 00 00 00 00
desc = Clears 0x14 bytes at 0x021D2330? (TODO)
base = EF 07

[Parameter]
name = unused1
offs = 2
bits = 8
desc = TODO

[Parameter]
name = unused2
offs = 3
bits = 8
desc = TODO

[Parameter]
name = unused3
offs = 4
bits = 8
desc = TODO

[Parameter]
name = unused4
offs = 5
bits = 8
desc = TODO

[Parameter]
name = unused5
offs = 6
bits = 8
desc = TODO



[Command]
name = check08
mask = FF FF 00 00 00 00 00
desc = Clears 0x14 bytes at 0x021D2330? (TODO)
base = EF 08

[Parameter]
name = unused1
offs = 2
bits = 8
desc = TODO

[Parameter]
name = unused2
offs = 3
bits = 8
desc = TODO

[Parameter]
name = unused3
offs = 4
bits = 8
desc = TODO

[Parameter]
name = unused4
offs = 5
bits = 8
desc = TODO

[Parameter]
name = unused5
offs = 6
bits = 8
desc = TODO



[Command]
name = check09
mask = FF FF 00 00 00 00 00
desc = Clears 0x14 bytes at 0x021D2330? (TODO)
base = EF 09

[Parameter]
name = unused1
offs = 2
bits = 8
desc = TODO

[Parameter]
name = unused2
offs = 3
bits = 8
desc = TODO

[Parameter]
name = unused3
offs = 4
bits = 8
desc = TODO

[Parameter]
name = unused4
offs = 5
bits = 8
desc = TODO

[Parameter]
name = unused5
offs = 6
bits = 8
desc = TODO



[Command]
name = check0A
mask = FF FF 00 00 00 00 00
desc = Clears 0x14 bytes at 0x021D2330? (TODO)
base = EF 0A

[Parameter]
name = unused1
offs = 2
bits = 8
desc = TODO

[Parameter]
name = unused2
offs = 3
bits = 8
desc = TODO

[Parameter]
name = unused3
offs = 4
bits = 8
desc = TODO

[Parameter]
name = unused4
offs = 5
bits = 8
desc = TODO

[Parameter]
name = unused5
offs = 6
bits = 8
desc = TODO



[Command]
name = check0B
mask = FF FF 00 00
desc = TODO
base = EF 0B

[Parameter]
name = jump0
offs = 2
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump1
offs = 3
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check0C
mask = FF FF 00 00
desc = TODO
base = EF 0C

[Parameter]
name = jump0
offs = 2
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump1
offs = 3
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check0D
mask = FF FF 00
desc = TODO
base = EF 0D

[Parameter]
name = jump0
offs = 2
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check0E
mask = FF FF 00
desc = TODO
base = EF 0E

[Parameter]
name = jump0
offs = 2
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check0F
mask = FF FF 00
desc = TODO; can continue instead of taking jump
base = EF 0F
ends = never

[Parameter]
name = jump0
offs = 2
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check10
mask = FF FF 00 00 00 00 00
desc = TODO
base = EF 10

[Parameter]
name = p0
offs = 2
bits = 8
desc = TODO

[Parameter]
name = p1
offs = 3
bits = 8
desc = TODO

[Parameter]
name = jump0
offs = 4
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump1
offs = 5
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 6
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check11
mask = FF FF 00 00 00 00 00 00 00
desc = TODO
base = EF 11

[Parameter]
name = p0
offs = 2
bits = 8
desc = TODO

[Parameter]
name = p1
offs = 3
bits = 8
desc = TODO

[Parameter]
name = p2
offs = 4
bits = 8
desc = TODO

[Parameter]
name = jump0
offs = 5
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump1
offs = 6
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 7
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check12
mask = FF FF 00 00 00 00 00 00
desc = TODO
base = EF 12

[Parameter]
name = p0
offs = 2
bits = 16
desc = TODO

[Parameter]
name = p1
offs = 4
bits = 16
desc = TODO

[Parameter]
name = jump0
offs = 6
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump1
offs = 7
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check13
mask = FF FF 00 00 00 00 00 00 00 00
desc = TODO
base = EF 13

[Parameter]
name = jump0
offs = 2
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump1
offs = 3
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump4
offs = 6
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump5
offs = 7
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump6
offs = 8
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump7
offs = 9
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check14
mask = FF FF 00 00 00
desc = TODO
base = EF 14

[Parameter]
name = p0
offs = 2
bits = 8
desc = TODO

[Parameter]
name = jump0
offs = 3
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump1
offs = 4
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check15
mask = FF FF 00 00 00 00
desc = TODO
base = EF 15

[Parameter]
name = p0
offs = 2
bits = 16
desc = TODO

[Parameter]
name = jump0
offs = 4
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump1
offs = 5
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check16
mask = FF FF 00 00 00 00 00 00 00
desc = TODO
base = EF 16

[Parameter]
name = jump0
offs = 2
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump1
offs = 3
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump3
offs = 5
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump4
offs = 6
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump5
offs = 7
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump6
offs = 8
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check17
mask = FF FF 00 00 00
desc = TODO (p0 used to select behavior?)
base = EF 17

[Parameter]
name = p0
offs = 2
bits = 8
desc = TODO

[Parameter]
name = jump0
offs = 3
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump1
offs = 4
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check18
mask = FF FF 00 00 00 00
desc = TODO
base = EF 18

[Parameter]
name = p0
offs = 2
bits = 16
desc = TODO

[Parameter]
name = jump0
offs = 4
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump1
offs = 5
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check19
mask = FF FF 00 00 00
desc = TODO
base = EF 19

[Parameter]
name = jump0
offs = 2
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump1
offs = 3
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check1A
mask = FF FF 00 00
desc = TODO
base = EF 1A
ends = never

[Parameter]
name = p0
offs = 2
bits = 8
desc = TODO

[Parameter]
name = jump0
offs = 3
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check1B
mask = FF FF 00 00 00
desc = TODO
base = EF 1B

[Parameter]
name = p0
offs = 2
bits = 8
desc = TODO

[Parameter]
name = jump0
offs = 3
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump1
offs = 4
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check1C
mask = FF FF 00 00 00 00
desc = TODO
base = EF 1C

[Parameter]
name = p0
offs = 2
bits = 8
desc = TODO

[Parameter]
name = p1
offs = 3
bits = 8
desc = TODO

[Parameter]
name = jump0
offs = 4
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump1
offs = 5
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check1D
mask = FF FF 00 00
desc = TODO
base = EF 1D

[Parameter]
name = jump0
offs = 2
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump1
offs = 3
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check1E
mask = FF FF 00 00 00
desc = TODO
base = EF 1E

[Parameter]
name = jump0
offs = 2
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump1
offs = 3
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check1F
mask = FF FF 00
desc = TODO
base = EF 1F

[Parameter]
name = jump0
offs = 2
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check20
mask = FF FF 00
desc = TODO (possible to continue instead of taking jump)
base = EF 20
ends = never

[Parameter]
name = jump0
offs = 2
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = check21
mask = FF FF 00
desc = TODO (not present in JP version?)
base = EF 21

[Parameter]
name = unused
offs = 2
bits = 8
desc = TODO (is it really unused?)



[Command]
name = jump00
mask = FF FF 00
desc = Jumps to a different script. (TODO: Difference with 04?)
base = F0 00

[Parameter]
name = target
offs = 2
bits = 8
desc = The script to jump to, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = jump01
mask = FF FF
desc = TODO
base = F0 01



[Command]
name = jumpBuffer02
mask = FF FF 00
desc = Jumps to previously buffered different script. If that is 255, execution continues with the current script. (TODO: Difference with 03?)
base = F0 02

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the target script from.
type = jump
valn = mmbn-jump



[Command]
name = jumpBuffer03
mask = FF FF 00
desc = Jumps to previously buffered different script. If that is 255, execution continues with the current script. (TODO: Difference with 02?)
base = F0 03

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the target script from.
type = jump
valn = mmbn-jump



[Command]
name = jump04
mask = FF FF 00
desc = Jumps to a different script. (TODO: Difference with 00?)
base = F0 04

[Parameter]
name = target
offs = 2
bits = 8
desc = The script to jump to, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = textSpeed
mask = FF FF 00
desc = Changes the speed at which text is printed to the screen.
base = F1 00

[Parameter]
name = delay
offs = 2
bits = 8
desc = The amount of frames to wait after printing a character. The default is 2 frames. If set to 0, will only last until the message box is cleared.



[Command]
name = clearMsg
mask = FF FF
desc = Clears any currently open message box and resets the text printer position.
base = F2 00



[Command]
name = controlLock
mask = FF FF
desc = Disables use of the A and B buttons to advance a message.
base = F3 00



[Command]
name = controlUnlock
mask = FF FF
desc = Enables use of the A and B buttons to advance a message.
base = F3 01



[Command]
name = itemGive
mask = FF FF 00 00
desc = Plays the "item get" sound effect, and adds to the player's inventory a specified amount of the specified item, or sets it to the maximum if that is exceeded.
base = F4 00

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to give, or 255 to load from a previously buffered Mystery Data and buffer a value based on which item that was.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to give.



[Command]
name = itemTake
mask = FF FF 00 00
desc = Takes from the player's inventory a specified amount of the specified item, but only if the player has enough.
base = F4 01

[Parameter]
name = item
offs = 2
bits = 8
desc = The item to take.

[Parameter]
name = amount
offs = 3
bits = 8
desc = The amount of items to take.



[Command]
name = itemGiveCard
mask = FF FF 00 00 00 00
desc = Plays the "item get" sound effect, and adds to the player's Card Box a specified amount of the specified card with the specified color, or sets it to the maximum if that is exceeded.
base = F4 02

[Parameter]
name = card
offs = 2
bits = 16
desc = The card to give.

[Parameter]
name = color
offs = 4
bits = 8
desc = The color of the card to give.
valn = mmsf-color

[Parameter]
name = amount
offs = 5
bits = 8
desc = The amount of cards to give.



[Command]
name = itemTakeCard
mask = FF FF 00 00 00 00
desc = Takes from the player's Card Box a specified amount of the specified card with the specified color, but only if the player has enough.
base = F4 03

[Parameter]
name = card
offs = 2
bits = 16
desc = The card to take.

[Parameter]
name = color
offs = 4
bits = 8
desc = The color of the card to take.
valn = mmsf-color

[Parameter]
name = amount
offs = 5
bits = 8
desc = The amount of card to take.



[Command]
name = itemGiveBuffered
mask = FF FF 00
desc = Plays the "item get" sound effect, and adds to the player's inventory a previously buffered item, or sets it to the maximum if that is exceeded.
base = F4 04

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the item and amount from.



[Command]
name = itemTakeBuffered
mask = FF FF 00
desc = Takes from the player's inventory a previously buffered item, but only if the player has enough.
base = F4 05

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the item and amount from.



[Command]
name = itemGiveCardBuffered
mask = FF FF 00
desc = Plays the "item get" sound effect, and adds to the player's Card Box a previously buffered card, or sets it to the maximum if that is exceeded.
base = F4 06

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the card, color and amount from.



[Command]
name = itemTakeCardBuffered
mask = FF FF 00
desc = Takes from the player's Card Box a previously buffered card, but only if the player has enough.
base = F4 07

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the card, color and amount from.



[Command]
name = itemGiveZennyBuffered
mask = FF FF 00
desc = Plays the "item get" sound effect, and adds to the player's inventory a previously buffered amount of Zenny, or sets it to the maximum if that is exceeded.
base = F4 08

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the amount of Zenny from.



[Command]
name = itemTakeZennyBuffered
mask = FF FF 00
desc = Takes from the player's inventory a previously buffered amount of Zenny, but only if the player has enough.
base = F4 09

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer to load the amount of Zenny from.



[Command]
name = itemBrotherSonia
mask = FF FF FF
desc = Plays the "item get" sound effect, and registers Sonia Strumm in the middle left BrotherBand slot, overwriting any other Brother in that slot.
base = F4 0A 04



[Command]
name = itemBrotherLuna
mask = FF FF FF
desc = Plays the "item get" sound effect, and registers Luna Platz in the top left BrotherBand slot, overwriting any other Brother in that slot.
base = F4 0A 05



[Command]
name = itemBrotherBud
mask = FF FF FF
desc = Plays the "item get" sound effect, and registers Bud Bison in the bottom left BrotherBand slot, overwriting any other Brother in that slot.
base = F4 0A 06



[Command]
name = itemBrotherZack
mask = FF FF FF
desc = Plays the "item get" sound effect, and registers Zack Temple in the middle left BrotherBand slot, overwriting any other Brother in that slot.
base = F4 0A 07



[Command]
name = itemFolder0B
mask = FF FF 00 00 00 00
desc = Does something folder related (TODO)
base = F4 0B

[Parameter]
name = p0
offs = 2
bits = 16
desc = TODO

[Parameter]
name = unused
offs = 4
bits = 16
desc = TODO (check unused)



[Command]
name = itemSetZenny
mask = FF FF 00 00
desc = Plays the "item get" sound effect, and sets the amount of Zenny in the player's inventory to the specified amount.
base = F4 0C

[Parameter]
name = amount
offs = 2
bits = 16
desc = The new amount of Zenny.



[Command]
name = itemAddZenny
mask = FF FF 00 00
desc = Plays the "item get" sound effect, and adds to the player's inventory the specified amount of Zenny, or sets it to the maximum if that is exceeded.
base = F4 0D

[Parameter]
name = amount
offs = 2
bits = 16
desc = The amount of Zenny.



[Command]
name = itemTakeZenny
mask = FF FF 00 00
desc = Takes from the player's inventory the specified amount of Zenny, but only if the player has enough.
base = F4 0E

[Parameter]
name = amount
offs = 2
bits = 16
desc = The amount of Zenny.



[Command]
name = itemGiveFolder
mask = FF FF 00
desc = Gives the player the specified folder registers all its cards in the library.
base = F4 0F

[Parameter]
name = folder
offs = 2
bits = 8
desc = The folder to give.



[Command]
name = mugshotShowNPC
mask = FF FF 00
desc = Displays the mugshot of an NPC in the current map in the message box.
base = F5 00
mugs = npc

[Parameter]
name = npc
offs = 2
bits = 8
desc = The NPC to show the mugshot of.



[Command]
name = mugshotHide
mask = FF FF
desc = Hides any mugshot being displayed in the current message box.
base = F5 01
# intentionally empty
mugs = 



[Command]
name = mugshotAnimation
mask = FF FF 00
desc = Changes the animation of the mugshot currently being displayed.
base = F5 02

[Parameter]
name = animation
offs = 2
bits = 8
desc = The mugshot animation to use.



[Command]
name = mugshotAnimationReset
mask = FF FF
desc = Resets the animation of the mugshot currently being displayed. (TODO: Verify)
base = F5 03



[Command]
name = mugshotShow
mask = FF FF 00 00
desc = Displays a mugshot in the current message box.
base = F5 04
mugs = mugshot

[Parameter]
name = mugshot
offs = 2
bits = 16
desc = The mugshot to use.
valn = mmsf1-mugshots



[Command]
name = mugshotShowBrotherBuffered
mask = FF FF 00
desc = Displays a previously buffered Brother's face pic in the current message box.
base = F5 05
mugs = buffer

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the Brother's face pic index.



[Command]
name = mugshotShowBuffered
mask = FF FF 00
desc = Displays a previously buffered mugshot in the current message box.
base = F5 06
mugs = buffer

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the mugshot's sprite number.



[Command]
name = mugshotShowStaticBuffered
mask = FF FF 00
desc = Displays a previously buffered static, unanimated mugshot in the current message box.
base = F5 07
mugs = buffer

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the mugshot's sprite number.



[Command]
name = mugshot08
mask = FF FF 00 00
desc = TODO (Unused?)
base = F5 08

[Parameter]
name = unused
offs = 2
bits = 16
desc = TODO (Unused? Value name mugshots?)



[Command]
name = mugshot09
mask = FF FF 00
desc = TODO (Unused?)
base = F5 09

[Parameter]
name = unused
offs = 2
bits = 8
desc = TODO (Unused?)



[Command]
name = mugshot0A
mask = FF FF
desc = TODO (0B disables?)
base = F5 0A



[Command]
name = mugshot0B
mask = FF FF
desc = TODO (0A enables?)
base = F5 0B



[Command]
name = mugshot0C
mask = FF FF
desc = TODO (Unused?)
base = F5 0C



[Command]
name = mugshot0D
mask = FF FF 00
desc = TODO
base = F5 0D
mugs = buffer

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing TODO



[Command]
name = mugshot0E
mask = FF FF
desc = TODO (Changes mugshot to something to do with Geo's mood/visualizer?)
base = F5 0E
# should change mugshot...



[Command]
name = mugshot0F
mask = FF FF 00
desc = TODO (draws junk mugshot?)
base = F5 0F
mugs = p0

[Parameter]
name = p0
offs = 2
bits = 8
desc = TODO



[Command]
name = mugshot10
mask = FF FF 00
desc = TODO
base = F5 10
mugs = buffer

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing TODO



[Command]
name = positionBox
mask = FF FF 00 00
desc = Changes the position of the message box and printed text. If this command is invoked when the message box is already displayed, the message box background will be removed.
base = F7 00

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of tiles, between the left edge of the message box and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of tiles, between the top edge of the message box and the top edge of the screen.



[Command]
name = positionBoxReset
mask = FF FF
desc = Resets the position of the message box and printed text. If this command is invoked when the message box is already displayed, the message box background will be removed.
base = F7 01



[Command]
name = positionArrow
mask = FF FF 00 00
desc = Changes the position of the message box arrow.
base = F7 02

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of pixels, between the left edge of the arrow and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of pixels, between the top edge of the arrow and the top edge of the screen.



[Command]
name = positionArrowReset
mask = FF FF
desc = Resets the position of the message box arrow.
base = F7 03



[Command]
name = positionText
mask = FF FF 00 00
desc = Changes the position of the printed text.
base = F7 04

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in number of tiles, between the left edge of the text and the left edge of the screen.

[Parameter]
name = top
offs = 3
bits = 8
desc = The vertical distance, in number of tiles, between the top edge of the text and the top edge of the screen.



[Command]
name = positionTextReset
mask = FF FF
desc = Resets the position of the printed text.
base = F7 05



[Command]
name = positionOptionFromCenter
mask = FF FF 00
desc = Allocates space for a number of menu options from the center of the text area.
base = F7 06
prnt = true

[Parameter]
name = width
offs = 2
bits = 8
desc = The amount of characters to be centered.



[Command]
name = position07
mask = FF FF 00 00
desc = TODO
base = F7 07

[Parameter]
name = p0
offs = 2
bits = 8
desc = TODO

[Parameter]
name = p1
offs = 3
bits = 8
desc = TODO



[Command]
name = position08
mask = FF FF
desc = TODO (Resets position07)
base = F7 08



[Command]
name = playerAnimate00
mask = FF FF 00
desc = Sets the player's current animation. (TODO: Dupe of F8 01?)
base = F8 00

[Parameter]
name = animation
offs = 2
bits = 8
desc = The animation to display.



[Command]
name = playerAnimate01
mask = FF FF 00
desc = Sets the player's current animation. (TODO: Dupe of F8 00?)
base = F8 01

[Parameter]
name = animation
offs = 2
bits = 8
desc = The animation to display.



[Command]
name = playerResetScene02
mask = FF FF
desc = Resets the player's current animation to what it was before it was changed. If it was not changed, the first animation is set. (TODO: Dupe of F8 03?)
base = F8 02



[Command]
name = playerResetScene03
mask = FF FF
desc = Resets the player's current animation to what it was before it was changed. If it was not changed, the first animation is set. (TODO: Dupe of F8 02?)
base = F8 03



[Command]
name = playerFinish
mask = FF FF
desc = Pauses script execution until the player's current animation finishes. If the player's current animation loops, this command waits forever.
base = F8 04



[Command]
name = store00
mask = FF FF 00 00
desc = TODO (is this storeGlobal?)
base = F9 00

[Parameter]
name = p0
offs = 2
bits = 8
desc = TODO

[Parameter]
name = p1
offs = 3
bits = 8
desc = TODO



[Command]
name = printItem
mask = FF FF 00 00
desc = Prints the name of the specified item.
base = FA 00
prnt = true

[Parameter]
name = item
offs = 2
bits = 16
desc = The item to print.



[Command]
name = printCard
mask = FF FF 00 00
desc = Prints the name of the specified Battle Card.
base = FA 01
prnt = true

[Parameter]
name = card
offs = 2
bits = 16
desc = The Battle Card to print.



[Command]
name = printCode
mask = FF FF 00 00
desc = Prints the name of the specified card color.
base = FA 02
prnt = true

[Parameter]
name = color
offs = 2
bits = 16
desc = The card color to print.
valn = mmsf-color



[Command]
name = printEnemy
mask = FF FF 00 00
desc = Prints the name of the specified enemy.
base = FA 03
prnt = true

[Parameter]
name = enemy
offs = 2
bits = 16
desc = The enemy to print.



[Command]
name = printPlayerName
mask = FF FF 00
desc = Prints one of the player's entered names. (TODO: Can it print other stuff?)
base = FA 04
prnt = true

[Parameter]
name = part
offs = 2
bits = 8
desc = The part of the player's name to print (first or last name).



[Command]
name = printBuffer
mask = FF FF 00 00
desc = Prints the contents of the specified buffer as a decimal number. 
base = FA 05
prnt = true

[Parameter]
name = buffer
offs = 3
bits = 8
desc = The buffer to print. Only values up to 3 are accepted.

[Parameter]
name = minLength
offs = 2
bits = 4
desc = The minimum amount of characters to print. Only values up to 8 are accepted.

[Parameter]
name = padMode
offs = 2.4
bits = 4
desc = How to apply padding. Accepted values are: 0 = no padding, 1 = pad left with spaces, 2 = pad left with zeroes.
valn = mmsf-padmode



[Command]
name = printItemBuffered
mask = FF FF 00
desc = Prints the name of a previously buffered item.
base = FA 06
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the item to print.



[Command]
name = printCardBuffered
mask = FF FF 00
desc = Prints the name of a previously buffered Battle Card.
base = FA 07
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the Battle Card to print.



[Command]
name = printColorBuffered
mask = FF FF 00
desc = Prints the name of a previously buffered Battle Card color.
base = FA 08
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the Battle Card color to print.



[Command]
name = printBrotherName
mask = FF FF 00 00
desc = Prints one of the player's Brothers' names. (TODO: can it print other stuff?)
base = FA 09
prnt = true

[Parameter]
name = brother
offs = 2
bits = 8
desc = The Brother to print the name of (0 = the player).

[Parameter]
name = part
offs = 3
bits = 8
desc = The part of the Brother's name to print (first or last name).



[Command]
name = printEnemyBuffered
mask = FF FF 00
desc = Prints the name of a previously buffered enemy.
base = FA 0A
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the enemy to print.



[Command]
name = printBrotherNameBuffered
mask = FF FF 00 00
desc = Prints one of the player's previously buffered Brothers' names. (TODO: can it print other stuff?)
base = FA 0B
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing the Brother to print the name of.

[Parameter]
name = part
offs = 3
bits = 8
desc = The part of the Brother's name to print (first or last name). For in-game Brothers and for this command only, the order is reversed.



[Command]
name = print0C
mask = FF FF 00 00
desc = TODO
base = FA 0C
prnt = true

[Parameter]
name = p0
offs = 2
bits = 16
desc = TODO



[Command]
name = print0D
mask = FF FF 00
desc = TODO (Buffered version of print0C)
base = FA 0D
prnt = true

[Parameter]
name = buffer
offs = 2
bits = 8
desc = The buffer containing TODO



[Command]
name = call00
mask = FF FF 00 00
desc = TODO (p0 determines behavior?)
base = FC 00

[Parameter]
name = p0
offs = 2
bits = 8
desc = TODO

[Parameter]
name = p1
offs = 3
bits = 8
desc = TODO



[Command]
name = callTextTransparent
mask = FF FF
desc = Makes the text printing area background transparent. Takes effect from the next character that is printed.
base = FC 01



[Command]
name = callTextOpaque
mask = FF FF
desc = Makes the text printing area background opaque (white). Takes effect from the next character that is printed.
base = FC 02



[Command]
name = call03
mask = FF FF 00
desc = TODO
base = FC 03

[Parameter]
name = p0
offs = 2
bits = 8
desc = TODO



[Command]
name = call04
mask = FF FF 00
desc = TODO
base = FC 04

[Parameter]
name = p0
offs = 2
bits = 8
desc = TODO



[Command]
name = callWarp
mask = FF FF 00
desc = Invokes a warp that exists in the current map.
base = FC 05
ends = always

[Parameter]
name = warp
offs = 2
bits = 8
desc = The warp in the current map to invoke.



[Command]
name = callShop
mask = FF FF 00
desc = Opens the shop screen with the specified shop.
base = FC 06
ends = always

[Parameter]
name = shop
offs = 2
bits = 8
desc = The index of the shop to load.



[Command]
name = call07
mask = FF FF 00 00 00
desc = TODO
base = FC 07

[Parameter]
name = jump0
offs = 2
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump1
offs = 3
bits = 8
desc = TODO
type = jump
valn = mmbn-jump

[Parameter]
name = jump2
offs = 4
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = call08
mask = FF FF 00
desc = TODO (related to Help signal?)
base = FC 08

[Parameter]
name = p0
offs = 2
bits = 8
desc = TODO



[Command]
name = call09
mask = FF FF 00
desc = TODO (related to Help signal?)
base = FC 09

[Parameter]
name = p0
offs = 2
bits = 8
desc = TODO



[Command]
name = callReceiveMail
mask = FF FF 00 00 00
desc = TODO
base = FC 0A

[Parameter]
name = mail
offs = 2
bits = 16
desc = The index of the mail to receive.

[Parameter]
name = jump0
offs = 4
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = callCardTrader
mask = FF FF 00
desc = Opens the Card Trader screen with the specified parameters after script execution ends.
base = FC 0B

[Parameter]
name = trader
offs = 2
bits = 8
desc = The index of the Card Trader payout list to use.

[Parameter]
name = isCardTrader5
offs = 2.6
bits = 1
desc = If true, the Card Trader takes 5 Battle Cards.
valn = bool

[Parameter]
name = isCardTraderSP
offs = 2.7
bits = 1
desc = If true, the Card Trader takes 10 Battle Cards. This flag takes priority over isCardTrader5.
valn = bool



[Command]
name = call0C
mask = FF FF 00
desc = TODO
base = FC 0C

[Parameter]
name = p0
offs = 2
bits = 8
desc = TODO



[Command]
name = call0D
mask = FF FF
desc = TODO
base = FC 0D



[Command]
name = call0E
mask = FF FF
desc = TODO
base = FC 0E



[Command]
name = call0F
mask = FF FF 00 00 00
desc = TODO
base = FC 0F

[Parameter]
name = p0
offs = 2
bits = 16
desc = TODO

[Parameter]
name = jump0
offs = 4
bits = 8
desc = TODO
type = jump
valn = mmbn-jump



[Command]
name = call10
mask = FF FF 00
desc = TODO
base = FC 10

[Parameter]
name = p0
offs = 2
bits = 8
desc = TODO



[Command]
name = call11
mask = FF FF
desc = TODO
base = FC 11



[Command]
name = call12
mask = FF FF
desc = TODO
base = FC 12



[Command]
name = call13
mask = FF FF
desc = TODO
base = FC 13



[Command]
name = soundPlay
mask = FF FF 00 00
desc = Plays the specified sound.
base = FD 00

[Parameter]
name = sound
offs = 2
bits = 16
desc = The sound to play.



[Command]
name = soundPlayBGM
mask = FF FF 00 00
desc = Plays the specified background music.
base = FD 01

[Parameter]
name = music
offs = 2
bits = 16
desc = The background music to play.



[Command]
name = soundEnableTextSFX
mask = FF FF
desc = Enables the sound effect that plays when a text character is printed on the screen.
base = FD 02



[Command]
name = soundDisableTextSFX
mask = FF FF
desc = Disables the sound effect that plays when a text character is printed on the screen.
base = FD 03



[Command]
name = sound04
mask = FF FF
desc = Enables TODO
base = FD 04



[Command]
name = sound05
mask = FF FF
desc = Disables TODO
base = FD 05



[Command]
name = soundStop
mask = FF FF
desc = Stops playback of the current background music.
base = FD 06



[Command]
name = soundFadeInBGM
mask = FF FF 00 00 00 00
desc = Fades in the specified background music over the specified amount of time.
base = FD 07

[Parameter]
name = music
offs = 2
bits = 16
desc = The background music to fade in.

[Parameter]
name = length
offs = 4
bits = 16
desc = The length of the fade-in in frames.



[Command]
name = soundFadeOutBGM
mask = FF FF 00 00
desc = Fades out the current background music over the specified amount of time.
base = FD 08

[Parameter]
name = length
offs = 2
bits = 16
desc = The length of the fade-in in frames.