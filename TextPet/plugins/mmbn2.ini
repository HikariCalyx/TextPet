[CommandDatabase]
name = mmbn2
cont = 255
splt = keyWait clearMsg



[Command]
name = end
mask = FF
desc = Closes any open message box and ends script execution.
base = E7



#[Command]
#name = newline
#mask = FF
#desc = Continues printing text on the next line.
#base = E8



[Command]
name = clearMsg
mask = FF
desc = Clears any currently open message box and resets the text printer position.
base = E9



[Command]
name = waitHold
; NOTE: only is 2 bytes long strictly speaking, but the game reserves 4 bytes
mask = FF FF 00 00
desc = Pauses script execution indefinitely.
base = EA FF
ends = always



[Command]
name = keyWait
mask = FF
desc = Pauses script execution until the A or B button is pressed.
base = EB



[Command]
name = textSpeed
mask = FF FF 00
desc = Changes the speed at which text is printed to the screen.
base = EC 00

[Parameter]
name = delay
offs = 2
bits = 8
desc = The amount of frames to wait after printing a character. The default is 2 frames.



[Command]
name = textEnableSkip
mask = FF FF
desc = Enables use of the A and B buttons to advance a message.
base = EC 01



[Command]
name = textDisableSkip
mask = FF FF
desc = Disables use of the A and B buttons to advance a message.
base = EC 02



[Command]
name = mugshotShow
mask = FF FF 00
desc = Displays a mugshot in the current message box.
base = ED 00
mugs = mugshot

[Parameter]
name = mugshot
offs = 2
bits = 8
desc = The mugshot to use.



[Command]
name = mugshotHide
mask = FF FF
desc = Hides any mugshot being displayed in the current message box.
base = ED 01
# Intentionally empty; sets mugshot to disabled
mugs = 



[Command]
name = mugshotPalette
mask = FF FF 00
desc = Changes the palette of the mugshot currently being displayed.
base = ED 02

[Parameter]
name = palette
offs = 2
bits = 8
desc = The mugshot palette to use.



[Command]
name = mugshotAnimate
mask = FF FF 00
desc = Changes the animation of the mugshot currently being displayed.
base = ED 03

[Parameter]
name = animation
offs = 2
bits = 8
desc = The mugshot animation to use.



[Command]
name = space
mask = FF FF 00
desc = Moves the text position to the right in blocks of eight pixels.
base = EE 00

[Parameter]
name = count
offs = 2
bits = 8
desc = The amount of spaces to insert.



[Command]
name = spaceLeft
mask = FF FF 00
desc = Moves the text position to the specified position from the left edge of the text, in blocks of eight pixels.
base = EE 01

[Parameter]
name = count
offs = 2
bits = 8
desc = The amount of spaces to start from the left.



[Command]
name = positionText
mask = FF FF 00 00
desc = Moves the entire text block to the specified position inside the message box.
base = EE 02

[Parameter]
name = left
offs = 2
bits = 8
desc = The horizontal distance, in units of 8 pixels, between the left edge of the text block and the left edge of the screen.

[Parameter]
name = top
offs = 2
bits = 8
desc = The vertical distance, in units of 8 pixels, between the top edge of the text block and the top edge of the message box.



[Command]
name = option
mask = FF 00 00
desc = Creates an array cursor menu option at the current text position.
base = EF

[Parameter]
name = left
offs = 1.4
bits = 4
desc = Which option to go to when Left is pressed.

[Parameter]
name = right
offs = 1.0
bits = 4
desc = Which option to go to when Right is pressed.

[Parameter]
name = up
offs = 2.4
bits = 4
desc = Which option to go to when Up is pressed.

[Parameter]
name = down
offs = 2.0
bits = 4
desc = Which option to go to when Down is pressed.



[Command]
name = select
mask = FF 00 00
desc = Lets the player choose from a number of previously defined options with the D-Pad and A button, and jumps to a different script if a certain option is chosen. If the B button is pressed, the last option is chosen by default. This game's version of the command includes "noDelay" functionality, but it is stored in the length parameter instead of in a separate bit. As a result, if the number of targets specified + 3 & 0x10 is nonzero, there is no delay before the selection marker appears.
base = F0
dadd = -3

[Length]
offs = 1
bits = 8

[Parameter]
name = default
offs = 2
bits = 4
desc = The option that is selected by default.

[Parameter]
name = disableB
offs = 2.6
bits = 1
desc = If true, pressing the B button has no effect; otherwise, it chooses the last labeled option.
valn = bool

[Parameter]
name = clear
offs = 2.7
bits = 1
desc = If true, clears the message box after choosing an option.
valn = bool

[Data]
name = target
offs = 0
bits = 8
desc = A script that execution can jump to depending on the chosen option, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = msgOpen
mask = FF FF
desc = Opens the message box and waits until the animation finishes.
base = F1 00



[Command]
name = msgClose
mask = FF FF
desc = Closes the message box and waits until the animation finishes.
base = F1 01



[Command]
name = msgOpenQuick
mask = FF FF
desc = Opens the message box without any animation.
base = F1 02



[Command]
name = msgCloseQuick
mask = FF FF
desc = Closes the message box without any animation.
base = F1 03



[Command]
name = msgOpenSmall
mask = FF FF 00
desc = Opens a small message box without any animation at the specified Y-coordinate.
base = F1 04

[Parameter]
name = top
offs = 2
bits = 8
desc = The vertical distance, in number of tiles, between the top edge of the message box and the top edge of the screen.



[Command]
name = flagSet
mask = FF FF 00 00
desc = Sets the specified flag.
base = F2 00

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to set.
type = hex



[Command]
name = flagClear
mask = FF FF 00 00
desc = Clears the specified flag.
base = F2 04

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to clear.
type = hex



[Command]
name = flagToggle
mask = FF FF 00 00
desc = Toggles the specified flag.
base = F2 08

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to toggle.
type = hex



[Command]
name = flagAddMail
mask = FF FF 00 00
desc = Makes the player receive the e-mail with the specified flag.
base = F2 0C

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag of the e-mail to give.
type = hex



[Command]
name = flagRemoveMail
mask = FF FF 00 00
desc = Receive the first e-mail with the specified flag from the player's inbox.
base = F2 10

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag of the e-mail to give.
type = hex



[Command]
name = flagAddRequest
mask = FF FF 00 00
desc = Adds the request with the specified flag to the Request Board.
base = F2 14

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag of the request to add.
type = hex



[Command]
name = flagRemoveRequest
mask = FF FF 00 00
desc = Removes the request with the specified flag to the Request Board. But if the Request Board does not currently contain the specified request, the Request Board is emptied instead.
base = F2 14

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag of the request to remove.
type = hex



[Command]
name = checkFlag
mask = FF FF 00 00 00 00
desc = Checks the specified flag, and jumps to a different script depending on if it is true or false.
base = F3 00

[Parameter]
name = flag
offs = 2
bits = 16
desc = The flag to check.
type = hex

[Parameter]
name = jumpIfTrue
offs = 4
bits = 8
desc = The script to jump to if the flag is set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 5
bits = 8
desc = The script to jump to if the flag is not set, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkProgress
mask = FF FF 00 00 00 00
desc = Checks the game progress, and jumps to a different script depending on if it falls inside or outside the specified range.
base = F3 04

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the game progress falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the game progress falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkShopStock
mask = FF FF 00 00 00
desc = Checks the stock of the specified shop, and jumps to a different script depending on if the shop is all sold out.
base = F3 08

[Parameter]
name = shop
offs = 2
bits = 8
desc = The shop to check the stock of.

[Parameter]
name = jumpIfStocked
offs = 3
bits = 8
desc = The script to jump to if the shop still has stock, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfSoldOut
offs = 4
bits = 8
desc = The script to jump to if the shop is all sold out, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkChipCodeFolder
mask = FF FF 00 00 00 00
desc = Checks whether the player's folder contains the specified chip with the specified code, and jumps to a different script depending on if it does or not.
base = F3 0C

[Parameter]
name = chip
offs = 2
bits = 8
desc = The chip to search for.

[Parameter]
name = code
offs = 3
bits = 8
desc = The code of the chip to search for.
valn = mmbn-code

[Parameter]
name = jumpIfTrue
offs = 4
bits = 8
desc = The script to jump to if the folder contains the chip, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfFalse
offs = 5
bits = 8
desc = The script to jump to if the folder does not contain the chip, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkLevel
mask = FF FF 00 00 00 00
desc = Checks the player's Level, and jumps to a different script depending on if it falls inside or outside the specified range.
base = F3 10

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the player's Level falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the player's Level falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkBustingLevel
mask = FF FF 00 00 00 00
desc = Checks the Busting Level of the player's last battle, and jumps to a different script depending on if it falls inside or outside the specified range. However, this game does not save the Busting Level after a battle, so this command is useless.
base = F3 14

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the Busting Level falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the Busting Level falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkLibrary
mask = FF FF 00 00 00 00
desc = Checks the amount of chips in the player's Library, and jumps to a different script depending on if it falls inside or outside the specified range.
base = F3 18

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the amount of chips in the player's Library falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the amount of chips in the player's Library falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkSubArea
mask = FF FF 00 00 00 00
desc = Checks the current subarea, and jumps to a different script depending on if it falls inside or outside the specified range.
base = F3 1C

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the subarea falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the subarea falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = check20
mask = FF FF 00 00 00 00
desc = Unknown command. Seems to check whether you are standing on a warp or jack in point, or some related variable. Some of the parameters are not actually used due to a bug.
base = F3 20

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range. Due to a bug, this parameter is discarded.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The upper boundary of the range. Due to a bug, this parameter is discarded.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the value falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the value falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump



[Command]
name = checkArea
mask = FF FF 00 00 00 00
desc = Checks the current area, and jumps to a different script depending on if it falls inside or outside the specified range.
base = F3 24

[Parameter]
name = lower
offs = 2
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = upper
offs = 3
bits = 8
desc = The lower boundary of the range.

[Parameter]
name = jumpIfInRange
offs = 4
bits = 8
desc = The script to jump to if the subarea falls inside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump

[Parameter]
name = jumpIfOutOfRange
offs = 5
bits = 8
desc = The script to jump to if the subarea falls outside the range, or 255 to continue with the current script.
type = jump
valn = mmbn-jump